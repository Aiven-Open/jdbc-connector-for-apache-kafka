/*
 * Copyright 2021 Aiven Oy and jdbc-connector-for-apache-kafka contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    id "java-library"

    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    id "checkstyle"

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id "jacoco"

    // https://docs.gradle.org/current/userguide/distribution_plugin.html
    id "distribution"

    // https://docs.gradle.org/current/userguide/publishing_maven.html
    id "maven-publish"

    // https://docs.gradle.org/current/userguide/idea_plugin.html
    id 'idea'
}

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
}

checkstyle {
    toolVersion "8.35"
    configDirectory.set(rootProject.file("checkstyle/"))
    println configFile
}

jacoco {
    toolVersion = "0.8.5"
}

distributions {
    main {
        contents {
            from jar
            from configurations.runtimeClasspath

            into("/") {
                from projectDir
                include "version.txt", "README*", "LICENSE*", "NOTICE*", "licenses/"
                include "config/"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            // Defaults, for clarity
            groupId = getGroup()
            artifactId = 'jdbc-connector-for-apache-kafka'
            version = getVersion()

            from components.java

            pom {
                name = "Aiven's JDBC Sink and Source Connectors for Apache Kafka"
                description = "A Kafka Connect JDBC connector for copying data between databases and Kafka."
                url = "https://aiven.io"
                organization {
                    name = "Aiven Oy"
                    url = "https://aiven.io"
                }
                licenses {
                    license {
                        name = "Apache License 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.html"
                        distribution = "repo"

                    }
                }
                scm {
                    connection = "scm:git:git://github.com/aiven/jdbc-connector-for-apache-kafka.git"
                    developerConnection = "scm:git:git@github.com:aiven/jdbc-connector-for-apache-kafka.git"
                    url = "https://github.com/aiven/jdbc-connector-for-apache-kafka"
                    tag = "HEAD"
                }
            }
        }
    }
}

ext {
    kafkaVersion = "2.2.0"
    slf4jVersion = "1.7.36"
    derbyVersion = "10.15.2.0"

    avroVersion = "1.11.0"
    // Version 1.8.1 brings Jackson 1.9.x/org.codehaus.jackson package for Avro and Confluent Platform 4.1.4.
    confluentPlatformVersion = "4.1.4" // For compatibility tests use version 4.1.4.
    hamcrestVersion = "2.2"
    jacksonVersion = "2.13.2" // This Jackson is used in the tests.
    jupiterVersion = "5.8.2"
    kafkaVersion = "2.0.1" // Oldest version supported, new versions are backwards compatible.
    jettyVersion = "11.0.9"
    junit4Version = "4.13.2"
    jsr305Version = "3.0.2"
    log4jVersion = "2.17.2"
    mockitoVersion = '4.3.1'
    servletVersion = "4.0.1"
    spotbugsAnnotationsVersion = "4.5.2"
    testcontainersVersion = '1.17.1'
    assertjVersion = "3.22.0"
    awaitilityVersion = '4.2.0'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
        testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}


dependencies {
    compileOnly "org.apache.kafka:connect-api:$kafkaVersion"

    runtimeOnly "org.xerial:sqlite-jdbc:3.36.0.3"
    runtimeOnly "org.postgresql:postgresql:42.3.4"
    runtimeOnly "net.sourceforge.jtds:jtds:1.3.1"
    runtimeOnly "net.snowflake:snowflake-jdbc:3.13.17"
    runtimeOnly "com.microsoft.sqlserver:mssql-jdbc:10.2.0.jre11"
    runtimeOnly "mysql:mysql-connector-java:8.0.29"

    implementation "com.google.guava:guava:31.1-jre"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.easymock:easymock:4.3"
    testImplementation "org.powermock:powermock-module-junit4:2.0.9"
    testImplementation "org.powermock:powermock-api-easymock:2.0.9"
    testImplementation "org.mockito:mockito-all:1.10.19"
    testImplementation "org.apache.kafka:connect-api:$kafkaVersion"
    testImplementation "commons-io:commons-io:2.11.0"
    testImplementation "org.apache.derby:derby:$derbyVersion"
    testImplementation "org.apache.derby:derbyclient:$derbyVersion"
    testImplementation "org.apache.derby:derbyshared:$derbyVersion"
    testImplementation "org.apache.derby:derbytools:$derbyVersion"
    testImplementation 'org.assertj:assertj-core:3.22.0'

    testRuntimeOnly "org.slf4j:slf4j-log4j12:$slf4jVersion"

    integrationTestRuntimeOnly "io.confluent:kafka-avro-serializer:$confluentPlatformVersion"
    integrationTestRuntimeOnly "io.confluent:kafka-connect-avro-converter:$confluentPlatformVersion"
    integrationTestRuntimeOnly "io.confluent:kafka-json-serializer:$confluentPlatformVersion"
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter:$jupiterVersion"
    integrationTestRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"

    integrationTestImplementation "org.apache.kafka:connect-runtime:$kafkaVersion"
    integrationTestImplementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    integrationTestImplementation "javax.servlet:javax.servlet-api:$servletVersion"
    integrationTestImplementation "org.apache.avro:avro:$avroVersion"
    integrationTestImplementation "org.apache.kafka:connect-runtime:$kafkaVersion"
    integrationTestImplementation "org.eclipse.jetty:jetty-http:$jettyVersion"
    integrationTestImplementation "org.eclipse.jetty:jetty-server:$jettyVersion"
    integrationTestImplementation "org.eclipse.jetty:jetty-util:$jettyVersion"
    integrationTestImplementation "junit:junit:$junit4Version" // This is for testcontainers
    integrationTestImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
    integrationTestImplementation "org.testcontainers:kafka:$testcontainersVersion" // this is not Kafka version
    integrationTestImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
    integrationTestImplementation "org.testcontainers:postgresql:$testcontainersVersion"
    integrationTestImplementation "org.awaitility:awaitility:$awaitilityVersion"
    integrationTestImplementation("org.assertj:assertj-db:2.0.2")

    // Make test utils from 'test' available in 'integration-test'
    integrationTestImplementation sourceSets.test.output
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    dependsOn test, distTar

    useJUnitPlatform()

    // Run always.
    outputs.upToDateWhen { false }

    // Pass the distribution file path to the tests.
    systemProperty("integration-test.distribution.file.path", distTar.archiveFile.get().asFile.path)
}

processResources {
    filesMatching('jdbc-connector-for-apache-kafka-version.properties') {
        expand(version: version)
    }
}

task connectorConfigDoc {
    description = "Generates the connector's configuration documentation."
    group = "documentation"
    dependsOn "classes"

    doLast {
        javaexec {
            main = "io.aiven.connect.jdbc.source.JdbcSourceConnectorConfig"
            classpath = sourceSets.main.runtimeClasspath + sourceSets.main.compileClasspath
            standardOutput = new FileOutputStream("$projectDir/docs/source-connector-config-options.rst")
        }
        javaexec {
            main = "io.aiven.connect.jdbc.sink.JdbcSinkConfig"
            classpath = sourceSets.main.runtimeClasspath + sourceSets.main.compileClasspath
            standardOutput = new FileOutputStream("$projectDir/docs/sink-connector-config-options.rst")
        }
    }
}
